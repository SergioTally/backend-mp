const db = require('../../models');
const ApiError = require('../utils/apiError');
const {{pascalCase name}} = db.{{name}};

exports.getAll = async () => {
  try {
    return await {{pascalCase name}}.findAll({
  where: {
    ACTIVO: true,
    FECHA_ELIMINO: null
  }
});
  } catch (error) {
    throw new ApiError('Error al obtener {{camelCase name}}s');
  }
};

exports.getById = async (id) => {
  try {
    const item = await {{pascalCase name}}.findByPk(id);
    if (!item) throw new ApiError('{{pascalCase name}} no encontrado', 404);
    return item;
  } catch (error) {
    throw error instanceof ApiError ? error : new ApiError('Error al buscar {{camelCase name}}');
  }
};

exports.create = async (data) => {
  try {
    return await {{pascalCase name}}.create(data);
  } catch (error) {
    throw new ApiError('Error al crear el {{camelCase name}}: ' + error.message, 400);
  }
};

exports.update = async (id, data) => {
  try {
    const item = await {{pascalCase name}}.findByPk(id);
    if (!item) throw new ApiError('{{pascalCase name}} no encontrado', 404);

    return await item.update(data);
  } catch (error) {
    throw new ApiError('Error al actualizar el {{camelCase name}}: ' + error.message, 400);
  }
};

exports.remove = async (id) => {
  try {
    const item = await {{pascalCase name}}.findByPk(id);
    if (!item) throw new ApiError('{{pascalCase name}} no encontrado', 404);

    await item.update({
      FECHA_ELIMINO: Sequelize.literal('GETDATE()'),
      ACTIVO: false
    });
    return item;
  } catch (error) {
    throw new ApiError('Error al eliminar el {{camelCase name}}: ' + error.message, 400);
  }
};
