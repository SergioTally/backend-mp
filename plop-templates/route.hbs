const express = require('express');
const router = express.Router();
const {{camelCase name}}Controller = require('../controllers/{{camelCase name}}.controller');
const verifyToken = require('../../middlewares/verifyToken');
const authorizeRoles = require('../../middlewares/authorizeRoles');

/**
 * @swagger
 * /{{camelCase name}}:
 *   get:
 *     summary: Obtener todos los registros de {{pascalCase name}}
 *     tags: [{{pascalCase name}}]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: Lista de registros
 *       401:
 *         description: Token inválido
 *       403:
 *         description: Acceso denegado por rol
 *       500:
 *         description: Error del servidor
 */
router.get('/', verifyToken, authorizeRoles('ADMINISTRADOR'), {{camelCase name}}Controller.getAll);

/**
 * @swagger
 * /{{camelCase name}}/{id}:
 *   get:
 *     summary: Obtener un {{camelCase name}} por ID
 *     tags: [{{pascalCase name}}]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         schema:
 *           type: integer
 *         required: true
 *         description: ID del recurso
 *     responses:
 *       200:
 *         description: Recurso encontrado
 *       401:
 *         description: Token inválido
 *       403:
 *         description: Acceso denegado por rol
 *       404:
 *         description: Recurso no encontrado
 *       500:
 *         description: Error del servidor
 */
router.get('/:id', verifyToken, authorizeRoles('ADMINISTRADOR'), {{camelCase name}}Controller.getById);

/**
 * @swagger
 * /{{camelCase name}}:
 *   post:
 *     summary: Crear nuevo {{camelCase name}}
 *     tags: [{{pascalCase name}}]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *     responses:
 *       201:
 *         description: Recurso creado
 *       400:
 *         description: Datos inválidos
 *       401:
 *         description: Token inválido
 *       403:
 *         description: Acceso denegado por rol
 */
router.post('/', verifyToken, authorizeRoles('ADMINISTRADOR'), {{camelCase name}}Controller.create);

/**
 * @swagger
 * /{{camelCase name}}/{id}:
 *   put:
 *     summary: Actualizar {{camelCase name}} por ID
 *     tags: [{{pascalCase name}}]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID del recurso
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *     responses:
 *       200:
 *         description: Recurso actualizado
 *       400:
 *         description: Datos inválidos
 *       401:
 *         description: Token inválido
 *       403:
 *         description: Acceso denegado por rol
 *       404:
 *         description: Recurso no encontrado
 */
router.put('/:id', verifyToken, authorizeRoles('ADMINISTRADOR'), {{camelCase name}}Controller.update);

/**
 * @swagger
 * /{{camelCase name}}/{id}:
 *   delete:
 *     summary: Eliminar {{camelCase name}} por ID
 *     tags: [{{pascalCase name}}]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID del recurso
 *     responses:
 *       200:
 *         description: Recurso eliminado
 *       401:
 *         description: Token inválido
 *       403:
 *         description: Acceso denegado por rol
 *       404:
 *         description: Recurso no encontrado
 *       500:
 *         description: Error del servidor
 */
router.delete('/:id', verifyToken, authorizeRoles('ADMINISTRADOR'), {{camelCase name}}Controller.remove);

module.exports = router;
